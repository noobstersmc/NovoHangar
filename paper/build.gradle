/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'maven-publish'    
    id 'kr.entree.spigradle' version '2.2.4'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.freefair.lombok' version '6.1.0'
}

/** Compiling and  Javadocs enconding options */
compileJava{
    options.encoding = 'UTF-8'
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}
javadoc {
    options.encoding = 'UTF-8'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // Use Jitpack for public dependencies
    maven { url 'https://jitpack.io' }
    // Repo for protocol lib
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    // Purpur repo
    maven { url "https://repo.pl3x.net/" }
    // SonaType repo for redis dependency
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    // User Purour 1.17.1 API
    compileOnly("net.pl3x.purpur:purpur-api:1.17.1-R0.1-SNAPSHOT")
    // Use Protocol Lib
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.7.0";
    // RapidInv
    implementation 'com.github.noobstersmc:RapidInv:v0.0.2.1'
    // MiniMessage
    implementation 'net.kyori:adventure-text-minimessage:4.1.0-SNAPSHOT'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    // Faker to generate fake names
    implementation 'com.github.javafaker:javafaker:1.0.2'
    // Redis
    implementation 'io.lettuce:lettuce-core:6.0.7.RELEASE'
    // Gson
    implementation 'com.google.code.gson:gson:2.8.8'
}

/**TODO: Add actual unit testing to the project */
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/** Spigradle config */
spigot {
    authors 'jcedeno'
    apiVersion '1.16'
    version '0.2'
    name 'NovoHangar'
    load STARTUP
    debug {
        args '--nojline', '--max-players', '100'
        jvmArgs '-Xmx16G'
        serverPort 25564
        eula true
    }
    depends = ['ProtocolLib']
}
/** Relocations for fatjar */
shadowJar {
}
/** Ensure build calls shadowJar to generate the fatJar */ 
build.dependsOn shadowJar